{
    "summary": "The code defines two functions, `save_corners` and `save_corners_json`, to save detected component coordinates in an image. It imports necessary libraries for image processing and creates separate directories for each component type, storing the extracted information in a JSON file with proper indentation. Additionally, it creates a thumbnail image clip from the original image, saves it as a .png file in a directory, creating the directory if it doesn't already exist using the build_directory function.",
    "details": [
        {
            "comment": "The code defines two functions, `save_corners` and `save_corners_json`, which take a file path as input and save the coordinates of detected components (corners) in the image. The `save_corners` function expects corners to be passed as separate arguments, while `save_corners_json` takes an iterable containing component objects with their respective IDs, classes, and bounding box coordinates. The code also imports several libraries such as os, pandas, json, and cv2 for image processing operations.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/component_detection/lib_ip/file_utils.py\":0-34",
            "content": "import os\nimport pandas as pd\nimport json\nfrom os.path import join as pjoin\nimport time\nimport cv2\ndef save_corners(file_path, corners, compo_name, clear=True):\n    try:\n        df = pd.read_csv(file_path, index_col=0)\n    except:\n        df = pd.DataFrame(columns=['component', 'x_max', 'x_min', 'y_max', 'y_min', 'height', 'width'])\n    if clear:\n        df = df.drop(df.index)\n    for corner in corners:\n        (up_left, bottom_right) = corner\n        c = {'component': compo_name}\n        (c['y_min'], c['x_min']) = up_left\n        (c['y_max'], c['x_max']) = bottom_right\n        c['width'] = c['y_max'] - c['y_min']\n        c['height'] = c['x_max'] - c['x_min']\n        df = df.append(c, True)\n    df.to_csv(file_path)\ndef save_corners_json(file_path, compos):\n    img_shape = compos[0].image_shape\n    output = {'img_shape': img_shape, 'compos': []}\n    f_out = open(file_path, 'w')\n    for compo in compos:\n        c = {'id': compo.id, 'class': compo.category}\n        (c['column_min'], c['row_min'], c['column_max'], c['row_max']) = compo.put_bbox()"
        },
        {
            "comment": "This code saves components detected in an image by extracting their coordinates and storing them in separate directories. It creates a new directory for each component type if it doesn't already exist, and increases the index of existing types. The extracted information is saved to a JSON file with proper indentation.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/component_detection/lib_ip/file_utils.py\":35-63",
            "content": "        c['width'] = compo.width\n        c['height'] = compo.height\n        output['compos'].append(c)\n    json.dump(output, f_out, indent=4)\ndef save_clipping(org, output_root, corners, compo_classes, compo_index):\n    if not os.path.exists(output_root):\n        os.mkdir(output_root)\n    pad = 2\n    for i in range(len(corners)):\n        compo = compo_classes[i]\n        (up_left, bottom_right) = corners[i]\n        (col_min, row_min) = up_left\n        (col_max, row_max) = bottom_right\n        col_min = max(col_min - pad, 0)\n        col_max = min(col_max + pad, org.shape[1])\n        row_min = max(row_min - pad, 0)\n        row_max = min(row_max + pad, org.shape[0])\n        # if component type already exists, index increase by 1, otherwise add this type\n        compo_path = pjoin(output_root, compo)\n        if compo_classes[i] not in compo_index:\n            compo_index[compo_classes[i]] = 0\n            if not os.path.exists(compo_path):\n                os.mkdir(compo_path)\n        else:\n            compo_index[compo_classes[i]] += 1"
        },
        {
            "comment": "The code is creating a thumbnail image clip from the original image and saving it as a .png file in a directory. The directory is created if it doesn't already exist using the build_directory function, which takes an input directory path and creates it if necessary.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/component_detection/lib_ip/file_utils.py\":64-71",
            "content": "        clip = org[row_min:row_max, col_min:col_max]\n        cv2.imwrite(pjoin(compo_path, str(compo_index[compo_classes[i]]) + '.png'), clip)\ndef build_directory(directory):\n    if not os.path.exists(directory):\n        os.mkdir(directory)\n    return directory"
        }
    ]
}