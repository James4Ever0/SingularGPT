{
    "summary": "The code consists of three image processing functions, which use OpenCV and other libraries for detecting text and components. The code is organized for debugging purposes with proper imports and output directory creation. Key parameters define input flags and the dictionary controls the image processing operations.",
    "details": [
        {
            "comment": "This code contains functions for component detection, text detection using OpenCV and other libraries. It defines get_longest_side() to determine the longest image dimension, resize_height_by_longest_edge() to resize images based on longest edge, and detect_text() to detect text in images. The code is organized for debugging and component detection purposes with proper imports and output directory creation.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/vision/vision_utils.py\":0-42",
            "content": "from os.path import join as pjoin\nimport cv2\nimport os\nimport numpy as np\nfrom config.CONFIG import _OCR\n\"\"\"\nMain Functions for Components detection purposes.\n\"\"\"\n# Getting highest between width and height based on numpy array image \ndef get_longest_side(img):\n    height, width, channels = img.shape\n    if height > width:\n        return height\n    else:\n        return width \n# For debugging purposes\ndef resize_height_by_longest_edge(img_path, resize_length):\n    org = cv2.imread(img_path)\n    height, width = org.shape[:2]\n    if height > width:\n        return resize_length\n    else:\n        return int(resize_length * (height / width))\n# Detecting text \ndef detect_text(input_path_img, output_root):\n    # Import the text detection module and call the text_detection function\n    import text_detection.text_detection as text\n    # Create the output directory\n    os.makedirs(pjoin(output_root, 'ocr'), exist_ok=True)\n    text.text_detection(input_path_img, output_root, method=_OCR)\n# Detecting components using opencv approaches"
        },
        {
            "comment": "This code contains three functions for image processing tasks, including text and component detection. The first function, `detect_component_by_ip`, creates an output directory named 'element' and uses the `component_detection.ip_region` module to detect components in the input image. The second function, `detect_components_and_text`, can detect both components and text based on parameters like minimum gradient, minimum element area, and line gap. Lastly, the `detect_component` function takes in an input image, output root directory, and flags for whether to detect text or elements, calling the appropriate detection function accordingly.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/vision/vision_utils.py\":43-63",
            "content": "def detect_component_by_ip(input_path_img, output_root, key_params, resized_height):\n    os.makedirs(pjoin(output_root, 'element'), exist_ok=True)\n    import component_detection.ip_region as ip\n    ip.compo_detection(input_path_img, output_root, key_params, resize_by_height=resized_height)\n# Detecting both text and components at once \ndef detect_components_and_text(input_path_img, output_root, _is_text, _is_element):\n    key_params = {'min-grad':3, 'ffl-block':5, 'min-ele-area':25, 'max-word-inline-gap':4, 'max-line-gap':4,\n                    'merge-contained-ele':True, 'merge-line-to-paragraph':False, 'remove-bar':True}\n    resize_length = get_longest_side(cv2.imread(input_path_img))\n    resized_height = resize_height_by_longest_edge(input_path_img, resize_length)\n    if _is_text:\n        detect_text(input_path_img, output_root)\n    if _is_element:\n        detect_component_by_ip(input_path_img, output_root, key_params, resized_height)\ndef detect_component(input_path_img, output_root, _is_text, _is_element):"
        },
        {
            "comment": "This code defines a dictionary of key parameters and performs image processing operations based on input flags. If `_is_text`, it detects text in the input image, and if `_is_element`, it detects components using the defined key parameters and resized height. The input image path and output root are also set.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/vision/vision_utils.py\":64-82",
            "content": "    key_params = {'min-grad':3, 'ffl-block':5, 'min-ele-area':25, 'max-word-inline-gap':4, 'max-line-gap':4,\n                    'merge-contained-ele':True, 'merge-line-to-paragraph':False, 'remove-bar':True}\n    resize_length = get_longest_side(cv2.imread(input_path_img))\n    resized_height = resize_height_by_longest_edge(input_path_img, resize_length)\n    is_clf = False\n    if _is_text:\n        detect_text(input_path_img, output_root)\n    if _is_element:\n        detect_component_by_ip(input_path_img, output_root, key_params, resized_height)\n# set input image path\n# input_path_img = 'data/input/gg.PNG'\n# output_root = 'data/output'\n# detect_component(input_path_img, output_root, _is_text=True, _is_element=True)"
        }
    ]
}