{
    "summary": "The Python script uses xdotool to define functions for keyboard input and precise mouse actions, including movement, scrolling, and clicks, in a Linux environment.",
    "details": [
        {
            "comment": "This code imports necessary libraries and defines functions to capture a screenshot, click at specified coordinates on the screen using xdotool utility. It uses subprocess calls for execution of commands in terminal. The 'click_one' function gets current window ID and performs left-click operation at given x, y coordinates. 'click_two' function also moves mouse to given coordinates but does not perform click action.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/zexui_lib/x11_commands.py\":0-29",
            "content": "import subprocess\nimport re\nfrom time import sleep\ndef capture(_img):\n    # Capture the entire screen\n    subprocess.run(f\"scrot --overwrite {_img}\", shell=True)\ndef click_one(x, y):\n    \"\"\"\n    This function uses the xdotool utility to move the mouse to given x and y coordinates on the screen and\n    performs a left-click (mouse button 1) operation.\n    Parameters:\n    x (int): The x-coordinate on the screen where the left-click operation needs to be performed.\n    y (int): The y-coordinate on the screen where the left-click operation needs to be performed.\n    \"\"\"\n    # Get the current window ID\n    window = subprocess.check_output(\"xdotool getmouselocation\", shell=True)\n    wind__ = int(re.search(r'\\d+', str(window).split(\" \")[-1].strip()).group())\n    # Move the mouse to the provided x and y coordinates and perform a left click\n    subprocess.run(f\"xdotool mousemove --window {wind__} {x} {y} click 1\", shell=True)\ndef click_two(x, y):\n    \"\"\"\n    This function uses the xdotool utility to move the mouse to given x and y coordinates on the screen and"
        },
        {
            "comment": "Function \"right_click\" performs a right-click operation at specified screen coordinates using xdotool.\nFunction \"write\" types out text with optional delay between keystrokes using xdotool.\nFunction \"press_key\" presses a specific key using xdotool, without additional parameters.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/zexui_lib/x11_commands.py\":30-59",
            "content": "    performs a right-click (mouse button 2) operation.\n    Parameters:\n    x (int): The x-coordinate on the screen where the right-click operation needs to be performed.\n    y (int): The y-coordinate on the screen where the right-click operation needs to be performed.\n    \"\"\"\n    # Get the current window ID\n    window = subprocess.check_output(\"xdotool getmouselocation\", shell=True)\n    wind__ = int(re.search(r'\\d+', str(window).split(\" \")[-1].strip()).group())\n    # Move the mouse to the provided x and y coordinates and perform a right click\n    subprocess.run(f\"xdotool mousemove --window {wind__} {x} {y} click 2\", shell=True)\ndef write(_text, delay):\n    \"\"\"\n    This function uses the xdotool utility to simulate keyboard input and type out the provided text.\n    Parameters:\n    _text (str): The text to be typed out.\n    \"\"\"\n    if delay: \n        subprocess.run(f'xdotool type --delay 50 \"{_text}\"', shell=True)\n    else:\n        subprocess.run(f'xdotool type \"{_text}\"', shell=True)\ndef press_key(x):\n    \"\"\""
        },
        {
            "comment": "The code defines functions to simulate key presses and mouse clicks using the xdotool utility in a Linux environment. It uses subprocess.run() to execute commands like \"xdotool key {x}\" for keyboard input or \"xdotool click {1, 2, or 3}\" for mouse clicks. Functions are available for left/right/middle clicks and left_click_at(x, y) for precise coordinates.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/zexui_lib/x11_commands.py\":60-99",
            "content": "    This function uses the xdotool utility to simulate key presses on the keyboard.\n    Parameters:\n    x (str): The key to be press. For example, 'ctrl+v', 'ctrl+t', 'shift+tab' etc.\n    \"\"\"\n    subprocess.run(f\"xdotool key {x}\", shell=True)\ndef left_click():\n    \"\"\"\n    This function uses the xdotool utility to perform a left-click (mouse button 1) operation.\n    \"\"\"\n    subprocess.run(\"xdotool click 1\", shell=True)\ndef middle_click():\n    \"\"\"\n    This function uses the xdotool utility to perform a middle-click (mouse button 2) operation.\n    \"\"\"\n    subprocess.run(\"xdotool click 2\", shell=True)\ndef right_click():\n    \"\"\"\n    This function uses the xdotool utility to perform a right-click (mouse button 3) operation.\n    \"\"\"\n    subprocess.run(\"xdotool click 3\", shell=True)\ndef left_click_at(x,y):\n    \"\"\"\n    This function uses the xdotool utility to move the mouse to the provided coordinates and perform\n    a left-click (mouse button 1) operation.\n    Parameters:\n    x (int): The x-coordinate on the screen where the left-click operation needs to be performed."
        },
        {
            "comment": "These functions use the xdotool utility to perform mouse operations such as left-click, middle-click, and right-click at specified coordinates on the screen. The left_click_at function performs a left-click operation at given x and y coordinates, middle_click_at performs a middle-click operation, and right_click_at performs a right-click operation. All functions use subprocess to execute the corresponding xdotool command with the provided coordinates.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/zexui_lib/x11_commands.py\":100-126",
            "content": "    y (int): The y-coordinate on the screen where the left-click operation needs to be performed.\n    \"\"\"\n    subprocess.run(f\"xdotool mousemove {x} {y} click 1\", shell=True)\ndef middle_click_at(x,y):\n    \"\"\"\n    This function uses the xdotool utility to move the mouse to the provided coordinates and perform\n    a middle-click (mouse button 2) operation.\n    Parameters:\n    x (int): The x-coordinate on the screen where the middle-click operation needs to be performed.\n    y (int): The y-coordinate on the screen where the middle-click operation needs to be performed.\n    \"\"\"\n    subprocess.run(f\"xdotool mousemove {x} {y} click 2\", shell=True)\ndef right_click_at(x,y):\n    \"\"\"\n    This function uses the xdotool utility to move the mouse to the provided coordinates and perform\n    a right-click (mouse button 3) operation.\n    Parameters:\n    x (int): The x-coordinate on the screen where the right-click operation needs to be performed.\n    y (int): The y-coordinate on the screen where the right-click operation needs to be performed."
        },
        {
            "comment": "This code snippet contains several functions for simulating mouse and scrolling movements using the xdotool utility. The \"mouse_move\" function moves the mouse to a specific set of coordinates, while \"scroll_up\", \"scroll_down\", and \"scroll_left\" functions simulate scrolling in different directions by specifying the number of pixels. All these operations are performed using subprocess calls to execute xdotool commands.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/zexui_lib/x11_commands.py\":127-161",
            "content": "    \"\"\"\n    subprocess.run(f\"xdotool mousemove {x} {y} click 3\", shell=True)\ndef mouse_move(x, y):\n    \"\"\"\n    This function uses the xdotool utility to move the mouse to the provided coordinates.\n    Parameters:\n    x (int): The x-coordinate on the screen where the mouse cursor needs to be moved.\n    y (int): The y-coordinate on the screen where the mouse cursor needs to be moved.\n    \"\"\"\n    subprocess.run(f\"xdotool mousemove {x} {y}\", shell=True)\ndef scroll_up(x):\n    \"\"\"\n    Simulates scrolling up by a specified x using xdotool.\n    :param x: The x of scrolling to be done vertically (in pixels)\n    \"\"\"\n    subprocess.run(['xdotool', 'mousemove_relative', '0', f'-{x}'])\ndef scroll_down(x):\n    \"\"\"\n    Simulates scrolling down by a specified x using xdotool.\n    :param x: The x of scrolling to be done vertically (in pixels)\n    \"\"\"\n    subprocess.run(['xdotool', 'mousemove_relative', '0', f'{x}'])\ndef scroll_left(x):\n    \"\"\"\n    Simulates scrolling left with the mouse wheel using xdotool.\n    :param x: The x of scrolling to be done horizontally (in pixels)"
        },
        {
            "comment": "The code is a Python script that utilizes the xdotool command-line tool to simulate various mouse actions such as movement, scrolling, and clicks. It defines functions for scrolling right with the mouse wheel, moving the mouse relative to a given position, waiting for a specified duration, and toggling the mouse up or down at a target object's coordinates. The code also explains how to use xdotool for different types of mouse actions like left click, middle click, right click, scroll wheel up, and scroll wheel down with examples.",
            "location": "\"/media/root/Toshiba XG3/works/SingularGPT/docs/src/zexui_lib/x11_commands.py\":162-198",
            "content": "    \"\"\"\n    subprocess.run(['xdotool', 'mousemove_relative', '--', f'-{x}', '0'])\ndef scroll_right(x):\n    \"\"\"\n    Simulates scrolling right with the mouse wheel using xdotool.\n    :param x: The x of scrolling to be done horizontally (in pixels)\n    \"\"\"\n    subprocess.run(['xdotool', 'mousemove_relative', f'{x}', '0'])\ndef wait(x):\n    if not x:\n        x = 3\n    sleep(x)\ndef mouseToggleUp(self):\n    # Get the x and y coordinates of the target object\n    x, y = self.cords[0], self.cords[1]\n    mouseToggleUp(x, y)\ndef mouseToggleDown(self):\n    # Get the x and y coordinates of the target object\n    x, y = self.cords[0], self.cords[1]\n    mouseToggleDown(x, y)\n# $ xdotool click 3\n# Replace \u201c3\u201d with with any number from the reference below:\n# 1 \u2013 Left click\n# 2 \u2013 Middle click\n# 3 \u2013 Right click\n# 4 \u2013 Scroll wheel up\n# 5 \u2013 Scroll wheel down\n# $ xdotool mousemove 100 100 click 3"
        }
    ]
}